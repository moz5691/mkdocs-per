{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Forums \u00b6 Code blocks \u00b6 C C++ 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } 1 console . log ( \"hello world\" ) // (1) test here.. Example blocks \u00b6 Example Unordered List Ordered List List, unordered 1 2 3 * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci List, ordered 1 2 3 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Math \u00b6 \\[ x^2 + y^2 = z^2 \\] \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . 1 2 3 theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. The HTML specification is maintained by the W3C . Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02] Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Home"},{"location":"#welcome_to_forums","text":"","title":"Welcome to Forums"},{"location":"#code_blocks","text":"C C++ 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } 1 console . log ( \"hello world\" ) // (1) test here..","title":"Code blocks"},{"location":"#example_blocks","text":"Example Unordered List Ordered List List, unordered 1 2 3 * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci List, ordered 1 2 3 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci","title":"Example blocks"},{"location":"#math","text":"\\[ x^2 + y^2 = z^2 \\] \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . 1 2 3 theme : features : - content.code.annotate # (1) I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be written in Markdown. The HTML specification is maintained by the W3C . Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 graph TD A[Client] --> B[Load Balancer] B --> C[Server01] B --> D[Server02] Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Math"},{"location":"about/","text":"About \u00b6","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"devops/git/","text":"Git \u00b6 Git commands \u00b6 1 2 3 $ git diff $ git status $ git log --graph --all --decorate Git stash \u00b6 Git has 'stash' to store all local changes ready to re-apply at will. The most use case is: 1 2 3 4 5 [do some work] [get interrupted] $ git stash [deal with interruption] git stash pop git stash commits the state of the index and then commits the local change to the refs/stash branch and merges them as a child of the HEAD on a new refs/stash branch. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /# mkdir lgthw_git_stash_1 /# cd lgthw_git_stash_1 /lgthw_git_stash_1# git init Initialized empty Git repository in /lgthw_git_stash_1/.git/ /lgthw_git_stash_1# echo 'Some content' > file1 /lgthw_git_stash_1# git add file1 /lgthw_git_stash_1# git commit -am initial [ master ( root-commit ) f6ba996 ] initial 1 file changed, 1 insertion ( + ) create mode 100644 file1 /lgthw_git_stash_1# echo 'Some changes I am not sure about' >> file1 /lgthw_git_stash_1# git diff diff --git a/file1 b/file1 index 0ee3895..49a96d6 100644 --- a/file1 +++ b/file1 @@ -1 +1,2 @@ Some content +Some changes I am not sure about 1 2 3 4 5 6 7 $ git stash list # to see your stash list $ git stash pop # when you ready, re-apply those changes on the same codebase $ git stash show <ID> # get minimal information about stash with ID $ git stash show --patch <ID> # get information in a different format $ git stash apply <ID> # apply change for <ID> $ git stash drop # remove the stash items $ git reflog # show a history of the changes made to the HEAD Git rebase \u00b6","title":"Git"},{"location":"devops/git/#git","text":"","title":"Git"},{"location":"devops/git/#git_commands","text":"1 2 3 $ git diff $ git status $ git log --graph --all --decorate","title":"Git commands"},{"location":"devops/git/#git_stash","text":"Git has 'stash' to store all local changes ready to re-apply at will. The most use case is: 1 2 3 4 5 [do some work] [get interrupted] $ git stash [deal with interruption] git stash pop git stash commits the state of the index and then commits the local change to the refs/stash branch and merges them as a child of the HEAD on a new refs/stash branch. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /# mkdir lgthw_git_stash_1 /# cd lgthw_git_stash_1 /lgthw_git_stash_1# git init Initialized empty Git repository in /lgthw_git_stash_1/.git/ /lgthw_git_stash_1# echo 'Some content' > file1 /lgthw_git_stash_1# git add file1 /lgthw_git_stash_1# git commit -am initial [ master ( root-commit ) f6ba996 ] initial 1 file changed, 1 insertion ( + ) create mode 100644 file1 /lgthw_git_stash_1# echo 'Some changes I am not sure about' >> file1 /lgthw_git_stash_1# git diff diff --git a/file1 b/file1 index 0ee3895..49a96d6 100644 --- a/file1 +++ b/file1 @@ -1 +1,2 @@ Some content +Some changes I am not sure about 1 2 3 4 5 6 7 $ git stash list # to see your stash list $ git stash pop # when you ready, re-apply those changes on the same codebase $ git stash show <ID> # get minimal information about stash with ID $ git stash show --patch <ID> # get information in a different format $ git stash apply <ID> # apply change for <ID> $ git stash drop # remove the stash items $ git reflog # show a history of the changes made to the HEAD","title":"Git stash"},{"location":"devops/git/#git_rebase","text":"","title":"Git rebase"},{"location":"linux_bash/linux_commands/","text":"Linux commands \u00b6 grep lines before and after matched line \u00b6 alice.txt 1 2 3 4 5 6 7 8 9 10 Alice sits on a riverbank on a warm summer day, drowsily reading over her sister\u2019s shoulder, when she catches sight of a White Rabbit in a waistcoat running by her. The White Rabbit pulls out a pocket watch, exclaims that he is late, and pops down a rabbit hole. Alice follows the White Rabbit down the hole and comes upon a great hallway lined with doors. She finds a small door that she opens using a key she discovers on a nearby table. Through the door, she sees a beautiful garden, and Alice begins to cry when she realizes she cannot fit through the door. She finds a bottle marked \u201cDRINK ME\u201d and downs the contents. Just want to find waistcoat in alice.txt 1 2 $ grep waistcoat alice.txt when she catches sight of a White Rabbit in a waistcoat running by her. If you want 1 line Before the matched line, 1 2 3 $ grep -B1 waistcoat alice.txt drowsily reading over her sister\u2019s shoulder, when she catches sight of a White Rabbit in a waistcoat running by her. If you want 2 lines After the matched line, 1 2 3 4 $ grep -A2 waistcoat alice.txt when she catches sight of a White Rabbit in a waistcoat running by her. The White Rabbit pulls out a pocket watch, exclaims that he is late, and pops down a rabbit hole.","title":"Linux"},{"location":"linux_bash/linux_commands/#linux_commands","text":"","title":"Linux commands"},{"location":"linux_bash/linux_commands/#grep_lines_before_and_after_matched_line","text":"alice.txt 1 2 3 4 5 6 7 8 9 10 Alice sits on a riverbank on a warm summer day, drowsily reading over her sister\u2019s shoulder, when she catches sight of a White Rabbit in a waistcoat running by her. The White Rabbit pulls out a pocket watch, exclaims that he is late, and pops down a rabbit hole. Alice follows the White Rabbit down the hole and comes upon a great hallway lined with doors. She finds a small door that she opens using a key she discovers on a nearby table. Through the door, she sees a beautiful garden, and Alice begins to cry when she realizes she cannot fit through the door. She finds a bottle marked \u201cDRINK ME\u201d and downs the contents. Just want to find waistcoat in alice.txt 1 2 $ grep waistcoat alice.txt when she catches sight of a White Rabbit in a waistcoat running by her. If you want 1 line Before the matched line, 1 2 3 $ grep -B1 waistcoat alice.txt drowsily reading over her sister\u2019s shoulder, when she catches sight of a White Rabbit in a waistcoat running by her. If you want 2 lines After the matched line, 1 2 3 4 $ grep -A2 waistcoat alice.txt when she catches sight of a White Rabbit in a waistcoat running by her. The White Rabbit pulls out a pocket watch, exclaims that he is late, and pops down a rabbit hole.","title":"grep lines before and after matched line"},{"location":"openapi/","text":"Swagger Open API doc page \u00b6","title":"Swagger Open API doc page"},{"location":"openapi/#swagger_open_api_doc_page","text":"","title":"Swagger Open API doc page"},{"location":"openapi/petstore/","text":"const ui = SwaggerUIBundle({ url: 'petstore.json', dom_id: '#swagger-ui', })","title":"Pet Store"},{"location":"openapi/robotstracker/","text":"const ui = SwaggerUIBundle({ url: 'robotstracker.json', dom_id: '#swagger-ui', })","title":"Robots Tracker"},{"location":"openapi/uspto/","text":"const ui = SwaggerUIBundle({ url: 'uspto.json', dom_id: '#swagger-ui', })","title":"Uspto"}]}